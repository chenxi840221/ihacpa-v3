#!/usr/bin/env python3
"""
Test script to verify the vulnerability scanning fix works
"""

import subprocess
import sys
import time
from pathlib import Path
import openpyxl

def test_vulnerability_fix():
    """Test if the vulnerability fix is working"""
    
    print("üß™ TESTING VULNERABILITY SCANNING FIX")
    print("=" * 60)
    
    # Test with a known vulnerable package
    test_package = "aiohttp"
    output_file = "test_vuln_fix.xlsx"
    
    print(f"\n1Ô∏è‚É£ Testing batch processing with {test_package}")
    print("-" * 60)
    
    # Clean up any existing test file
    if Path(output_file).exists():
        Path(output_file).unlink()
    
    # Run batch processing with the fix
    cmd = [
        "python", "src/main.py",
        "--input", "2025-07-09 IHACPA Review of ALL existing PYTHON Packages - org.xlsx",
        "--output", output_file,
        "--enable-batch-processing",
        "--batch-size", "1",
        "--packages", test_package
    ]
    
    print(f"Command: {' '.join(cmd)}")
    print("\nRunning batch processing (timeout: 90s)...")
    
    try:
        start_time = time.time()
        
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        
        # Capture output with timeout
        output_lines = []
        while True:
            if process.poll() is not None:
                break
            
            line = process.stdout.readline()
            if line:
                output_lines.append(line.strip())
                print(f"  {line.strip()}")
            
            # Check timeout
            if time.time() - start_time > 90:
                print("\n‚è±Ô∏è Process timed out after 90 seconds")
                process.terminate()
                break
        
        process.wait()
        
    except Exception as e:
        print(f"‚ùå Error running test: {e}")
        return
    
    # Check results
    print(f"\n2Ô∏è‚É£ Checking Results in {output_file}")
    print("-" * 60)
    
    if not Path(output_file).exists():
        print("‚ùå Output file was not created")
        return
    
    try:
        wb = openpyxl.load_workbook(output_file, read_only=True)
        ws = wb.active
        
        # Find aiohttp row
        aiohttp_row = None
        for row in range(4, ws.max_row + 1):
            package_name = ws.cell(row=row, column=2).value
            if package_name and package_name.lower() == 'aiohttp':
                aiohttp_row = row
                break
        
        if not aiohttp_row:
            print(f"‚ùå Could not find {test_package} in output file")
            wb.close()
            return
        
        print(f"‚úÖ Found {test_package} at row {aiohttp_row}")
        
        # Check vulnerability columns
        vulnerability_results = {
            'NIST NVD (P)': ws.cell(row=aiohttp_row, column=16).value,
            'MITRE CVE (R)': ws.cell(row=aiohttp_row, column=18).value,
            'SNYK (T)': ws.cell(row=aiohttp_row, column=20).value,
            'Exploit DB (V)': ws.cell(row=aiohttp_row, column=22).value
        }
        
        print(f"\nüìä Vulnerability Scan Results for {test_package}:")
        print("-" * 60)
        
        vulnerabilities_found = False
        
        for col_name, result in vulnerability_results.items():
            if result:
                print(f"{col_name:<15}: {result}")
                
                # Check if it found actual vulnerabilities
                result_str = str(result).lower()
                if any(keyword in result_str for keyword in ['cve-', 'vulnerable', 'security risk', 'found']):
                    if 'none found' not in result_str and 'not listed' not in result_str:
                        vulnerabilities_found = True
                        print(f"                  ‚úÖ FOUND VULNERABILITIES!")
                elif 'none found' in result_str or 'not listed' in result_str:
                    print(f"                  ‚ö†Ô∏è  No vulnerabilities (may be correct for latest version)")
                else:
                    print(f"                  ‚ÑπÔ∏è  Status: {result}")
            else:
                print(f"{col_name:<15}: [EMPTY]")
        
        wb.close()
        
        # Analysis
        print("\n" + "=" * 60)
        print("üîç TEST RESULTS ANALYSIS")
        print("=" * 60)
        
        if vulnerabilities_found:
            print("‚úÖ SUCCESS: Vulnerability scanning is now working correctly!")
            print("   - Found actual vulnerability data")
            print("   - Columns P, R, T, V are being populated properly")
            print("   - The fix resolved the batch processing issue")
        else:
            # Check if it's a version issue vs a scanning issue
            has_results = any(vulnerability_results.values())
            if has_results:
                print("‚ö†Ô∏è  PARTIAL SUCCESS: Scanning is working but no CVEs found")
                print("   - This might be correct if aiohttp latest version has no CVEs")
                print("   - The important thing is that columns are being populated")
                print("   - The fix appears to be working (no more [EMPTY] columns)")
            else:
                print("‚ùå FAILURE: Vulnerability columns are still empty")
                print("   - The fix may not be working correctly")
                print("   - Check logs for scanning errors")
        
        # Log analysis
        print(f"\nüìù Log Analysis:")
        vulnerability_keywords = ['scan', 'vulnerabilit', 'cve', 'nist', 'mitre', 'snyk']
        relevant_logs = [line for line in output_lines 
                        if any(keyword in line.lower() for keyword in vulnerability_keywords)]
        
        if relevant_logs:
            print(f"   Found {len(relevant_logs)} vulnerability-related log entries")
            print("   Sample entries:")
            for log in relevant_logs[:3]:
                print(f"     - {log}")
        else:
            print("   No vulnerability-related log entries found")
    
    except Exception as e:
        print(f"‚ùå Error analyzing results: {e}")
    
    finally:
        # Cleanup
        if Path(output_file).exists():
            Path(output_file).unlink()
            print(f"\nüßπ Cleaned up {output_file}")

if __name__ == "__main__":
    test_vulnerability_fix()