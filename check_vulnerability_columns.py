#!/usr/bin/env python3
"""
Check vulnerability scan columns in results.xlsx
"""

import openpyxl
from pathlib import Path

def check_vulnerability_columns(file_path: str):
    """Check if vulnerability scan columns are updated"""
    
    print(f"üîç Checking Vulnerability Columns in: {file_path}")
    print("=" * 70)
    
    if not Path(file_path).exists():
        print(f"‚ùå File not found: {file_path}")
        return
    
    try:
        wb = openpyxl.load_workbook(file_path, read_only=True)
        ws = wb.active
        
        # Column mapping for vulnerability scanners
        vuln_columns = {
            'P': 'NIST NVD Result',
            'R': 'MITRE CVE Result', 
            'T': 'SNYK Result',
            'V': 'Exploit DB Result'
        }
        
        print("Checking first 10 packages:")
        print("-" * 70)
        print(f"{'Row':<4} {'Package':<20} {'Version (F)':<12} {'NIST (P)':<10} {'MITRE (R)':<10} {'SNYK (T)':<10} {'Exploit (V)':<10}")
        print("-" * 70)
        
        missing_vulns = []
        
        for row in range(4, 14):  # Check rows 4-13
            package_name = ws.cell(row=row, column=2).value  # Column B
            version = ws.cell(row=row, column=6).value  # Column F
            
            # Check vulnerability columns
            nist = ws.cell(row=row, column=16).value  # Column P
            mitre = ws.cell(row=row, column=18).value  # Column R
            snyk = ws.cell(row=row, column=20).value  # Column T
            exploit = ws.cell(row=row, column=22).value  # Column V
            
            # Determine status
            has_version = "‚úÖ" if version else "‚ùå"
            has_nist = "‚úÖ" if nist else "‚ùå"
            has_mitre = "‚úÖ" if mitre else "‚ùå"
            has_snyk = "‚úÖ" if snyk else "‚ùå"
            has_exploit = "‚úÖ" if exploit else "‚ùå"
            
            print(f"{row:<4} {str(package_name)[:20]:<20} {has_version:<12} {has_nist:<10} {has_mitre:<10} {has_snyk:<10} {has_exploit:<10}")
            
            # Track missing vulnerability data
            if version and not (nist and mitre and snyk and exploit):
                missing_vulns.append({
                    'row': row,
                    'package': package_name,
                    'missing': []
                })
                if not nist: missing_vulns[-1]['missing'].append('NIST')
                if not mitre: missing_vulns[-1]['missing'].append('MITRE')
                if not snyk: missing_vulns[-1]['missing'].append('SNYK')
                if not exploit: missing_vulns[-1]['missing'].append('ExploitDB')
        
        wb.close()
        
        # Analysis
        print("\n" + "=" * 70)
        print("üìä ANALYSIS")
        print("=" * 70)
        
        if missing_vulns:
            print(f"‚ö†Ô∏è  ISSUE FOUND: {len(missing_vulns)} packages have version info but missing vulnerability data!")
            print("\nPackages with missing vulnerability scans:")
            for item in missing_vulns:
                print(f"  - {item['package']} (row {item['row']}): Missing {', '.join(item['missing'])}")
            
            print("\nüîç This confirms your observation:")
            print("  ‚úÖ Version information (columns C, F, H) IS being updated")
            print("  ‚ùå Vulnerability scans (columns P, R, T, V) are NOT being updated")
        else:
            print("‚úÖ All packages with version info also have vulnerability scan results")
        
    except Exception as e:
        print(f"‚ùå Error reading file: {e}")

def check_all_results():
    """Check multiple result files"""
    files_to_check = [
        "results.xlsx",
        "test_diagnostic.xlsx",
        "02-Source-Data/2025-07-09 IHACPA Review of ALL existing PYTHON Packages.xlsx"
    ]
    
    for file_path in files_to_check:
        if Path(file_path).exists():
            check_vulnerability_columns(file_path)
            print("\n" + "‚îÄ" * 70 + "\n")

if __name__ == "__main__":
    check_all_results()