#!/usr/bin/env python3
"""
Test script to verify Exploit Database AI integration
"""

import sys
import asyncio
sys.path.append('src')

from ai_cve_analyzer import AICVEAnalyzer
from vulnerability_scanner import VulnerabilityScanner

async def test_exploit_db_ai():
    """Test Exploit Database AI analysis functionality"""
    
    print('🔍 Testing Exploit Database AI Integration')
    print('=' * 50)
    
    # Test AI CVE Analyzer directly
    print('\n📋 Testing AI CVE Analyzer Exploit Database method...')
    analyzer = AICVEAnalyzer()
    
    if analyzer.is_enabled():
        print(f'✅ AI Analyzer enabled: {analyzer.model}')
        
        # Test Exploit Database analysis
        result = await analyzer.analyze_exploit_db_result(
            package_name='requests',
            current_version='2.25.0',
            exploit_db_lookup_url='https://www.exploit-db.com/search?text=requests'
        )
        
        print(f'📝 Exploit Database AI Analysis Result:')
        print(f'   {result}')
        
        # Test another package
        result2 = await analyzer.analyze_exploit_db_result(
            package_name='aiohttp',
            current_version='3.8.0',
            exploit_db_lookup_url='https://www.exploit-db.com/search?text=aiohttp'
        )
        
        print(f'📝 Exploit Database AI Analysis Result (aiohttp):')
        print(f'   {result2}')
        
        # Test a safer package
        result3 = await analyzer.analyze_exploit_db_result(
            package_name='agate',
            current_version='1.9.1',
            exploit_db_lookup_url='https://www.exploit-db.com/search?text=agate'
        )
        
        print(f'📝 Exploit Database AI Analysis Result (agate):')
        print(f'   {result3}')
        
    else:
        print('❌ AI analyzer not enabled')
        return
    
    # Test Vulnerability Scanner integration
    print('\n🔧 Testing Vulnerability Scanner Exploit Database integration...')
    scanner = VulnerabilityScanner()
    
    if scanner.ai_analyzer and scanner.ai_analyzer.is_enabled():
        print('✅ Scanner AI integration enabled')
        
        # Test Exploit Database scan with AI
        exploit_result = await scanner.scan_exploit_db('requests', '2.25.0')
        
        print(f'📊 Exploit Database Scanner Result:')
        print(f'   Database: {exploit_result.get("database")}')
        print(f'   Package: {exploit_result.get("package_name")} v{exploit_result.get("current_version")}')
        print(f'   URL: {exploit_result.get("search_url")}')
        print(f'   Summary: {exploit_result.get("summary", "No summary")[:100]}...')
        print(f'   AI Analysis: {exploit_result.get("ai_analysis", "No AI analysis")[:100]}...')
        
        await scanner.close()
    else:
        print('❌ Scanner AI integration not enabled')
    
    print('\n🎉 Exploit Database AI Integration Test Completed!')

if __name__ == "__main__":
    asyncio.run(test_exploit_db_ai())