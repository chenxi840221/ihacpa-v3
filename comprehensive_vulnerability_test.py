#!/usr/bin/env python3
"""
Comprehensive test to verify vulnerability scanning is working correctly
Tests packages known to have CVEs
"""

import openpyxl
import requests
from pathlib import Path
import time

def test_known_vulnerable_packages():
    """Test packages that are known to have CVEs"""
    
    print("üö® COMPREHENSIVE VULNERABILITY SCANNING TEST")
    print("=" * 80)
    
    # Packages that definitely have known CVEs
    known_vulnerable_packages = {
        'aiohttp': {
            'expected_cves': ['CVE-2024-23334', 'CVE-2024-23829', 'CVE-2023-49082', 'CVE-2023-49081'],
            'description': 'HTTP client/server - multiple recent CVEs'
        },
        'requests': {
            'expected_cves': ['CVE-2023-32681', 'CVE-2024-35195'],
            'description': 'HTTP library - proxy tunnel vulnerability'
        },
        'urllib3': {
            'expected_cves': ['CVE-2023-45803', 'CVE-2023-43804', 'CVE-2024-37891'],
            'description': 'HTTP client library - multiple CVEs'
        },
        'flask': {
            'expected_cves': ['CVE-2023-30861', 'CVE-2024-7642'],
            'description': 'Web framework - session cookie vulnerability'
        },
        'pillow': {
            'expected_cves': ['CVE-2024-28219', 'CVE-2023-50447', 'CVE-2023-44271'],
            'description': 'Image processing - many CVEs due to image parsing'
        },
        'lxml': {
            'expected_cves': ['CVE-2024-30238', 'CVE-2022-2309'],
            'description': 'XML processing - parsing vulnerabilities'
        },
        'cryptography': {
            'expected_cves': ['CVE-2024-26130', 'CVE-2023-50782'],
            'description': 'Cryptography library - algorithm vulnerabilities'
        },
        'django': {
            'expected_cves': ['CVE-2024-45230', 'CVE-2024-45231', 'CVE-2024-42005'],
            'description': 'Web framework - XSS and other vulnerabilities'
        }
    }
    
    print(f"\nTesting {len(known_vulnerable_packages)} packages known to have CVEs:")
    print("-" * 80)
    
    for package, info in known_vulnerable_packages.items():
        print(f"\nüì¶ {package.upper()}")
        print(f"   Expected CVEs: {len(info['expected_cves'])}")
        print(f"   Examples: {', '.join(info['expected_cves'][:3])}")
        print(f"   Description: {info['description']}")
    
    # Check what our results.xlsx shows
    print("\n" + "=" * 80) 
    print("CHECKING RESULTS.xlsx FOR THESE PACKAGES")
    print("=" * 80)
    
    if not Path("results.xlsx").exists():
        print("‚ùå results.xlsx not found")
        return
    
    try:
        wb = openpyxl.load_workbook("results.xlsx", read_only=True)
        ws = wb.active
        
        # Find these packages in the Excel file
        package_results = {}
        
        for row in range(4, ws.max_row + 1):
            package_name = ws.cell(row=row, column=2).value
            if package_name and package_name.lower() in known_vulnerable_packages:
                
                # Get vulnerability scan results
                nist_result = ws.cell(row=row, column=16).value  # Column P
                mitre_result = ws.cell(row=row, column=18).value  # Column R
                snyk_result = ws.cell(row=row, column=20).value   # Column T
                exploit_result = ws.cell(row=row, column=22).value # Column V
                
                package_results[package_name.lower()] = {
                    'row': row,
                    'nist': nist_result,
                    'mitre': mitre_result,
                    'snyk': snyk_result,
                    'exploit': exploit_result
                }
        
        wb.close()
        
        # Analyze results
        print(f"\nFound {len(package_results)} of {len(known_vulnerable_packages)} packages in results.xlsx:")
        print("-" * 80)
        
        issues_found = 0
        
        for package_name, results in package_results.items():
            expected_info = known_vulnerable_packages[package_name]
            
            print(f"\nüì¶ {package_name.upper()} (Row {results['row']}):")
            print(f"   Should have: {len(expected_info['expected_cves'])} CVEs")
            
            # Check each scanner result
            scanners = {
                'NIST NVD': results['nist'],
                'MITRE CVE': results['mitre'], 
                'SNYK': results['snyk'],
                'Exploit DB': results['exploit']
            }
            
            found_vulnerabilities = False
            
            for scanner_name, result in scanners.items():
                if result:
                    # Check if it found actual vulnerabilities
                    result_str = str(result).lower()
                    if any(keyword in result_str for keyword in ['cve-', 'vulnerable', 'security risk', 'affected']):
                        print(f"   ‚úÖ {scanner_name}: Found vulnerabilities")
                        found_vulnerabilities = True
                    elif any(keyword in result_str for keyword in ['none found', 'not listed', 'not found']):
                        print(f"   ‚ùå {scanner_name}: '{result}' (WRONG - should find CVEs!)")
                    else:
                        print(f"   ‚ö†Ô∏è  {scanner_name}: '{result}' (unclear)")
                else:
                    print(f"   ‚ùå {scanner_name}: [EMPTY]")
            
            if not found_vulnerabilities:
                issues_found += 1
                print(f"   üö® PROBLEM: No vulnerabilities found for {package_name} (should have {len(expected_info['expected_cves'])} CVEs)")
        
        # Summary
        print("\n" + "=" * 80)
        print("üîç ANALYSIS SUMMARY")
        print("=" * 80)
        
        if issues_found > 0:
            print(f"üö® MAJOR ISSUE CONFIRMED: {issues_found}/{len(package_results)} packages with known CVEs")
            print("   are showing NO vulnerabilities in the scan results!")
            
            print(f"\n‚ùå The vulnerability scanning system is BROKEN:")
            print("   - Packages with dozens of known CVEs show 'None found'")
            print("   - This affects NIST, MITRE, SNYK, and Exploit DB scanners")
            print("   - The batch processing IS running, but scanners return wrong results")
            
            print(f"\nüîß REQUIRED FIXES:")
            print("   1. Check API endpoints and request formatting")
            print("   2. Verify result parsing logic")
            print("   3. Test individual scanner functions")
            print("   4. Check rate limiting and error handling")
            
        else:
            print("‚úÖ All known vulnerable packages show proper vulnerability results")
        
        # Test a few packages manually
        print("\n" + "=" * 80)
        print("üåê MANUAL API TEST (NIST NVD)")
        print("=" * 80)
        
        test_packages = ['aiohttp', 'requests', 'urllib3']
        
        for package in test_packages:
            if package in package_results:
                print(f"\nTesting NIST API for {package}...")
                try:
                    # Test NIST NVD API directly
                    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={package}"
                    response = requests.get(url, timeout=10)
                    
                    if response.status_code == 200:
                        data = response.json()
                        total_results = data.get('totalResults', 0)
                        print(f"   NIST API: {total_results} CVEs found")
                        
                        if total_results > 0:
                            cves = []
                            for vuln in data.get('vulnerabilities', [])[:5]:
                                cve_id = vuln.get('cve', {}).get('id', 'Unknown')
                                cves.append(cve_id)
                            print(f"   Sample CVEs: {', '.join(cves)}")
                            
                            # Compare with our result
                            our_result = package_results[package]['nist']
                            if 'none found' in str(our_result).lower():
                                print(f"   üö® OUR SCANNER RESULT: '{our_result}' (COMPLETELY WRONG!)")
                    else:
                        print(f"   API Error: Status {response.status_code}")
                        if response.status_code == 429:
                            print("   (Rate limited - this might be the issue)")
                            
                except Exception as e:
                    print(f"   API Test Error: {e}")
                
                time.sleep(1)  # Rate limiting
        
    except Exception as e:
        print(f"‚ùå Error reading results.xlsx: {e}")

if __name__ == "__main__":
    test_known_vulnerable_packages()